if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
flips
#> [1] 21
### 5.1.3 If, else, ifelse
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
while (nheads < 3) {
if (flip() == "H") {
nheads <- nheads + 1
} else {
nheads <- 0
}
flips <- flips + 1
}
flips
watermelon <- F
ifelse(watermelon == TRUE, yes = "Buy 1 orange", no = "Buy 6 oranges")
ifelse(test = numbers >= 65, yes = TRUE, no =FALSE)
numbers <- c(105, 75, 43, 56, 89, 33)
ifelse(test = numbers >= 65, yes = TRUE, no =FALSE)
ifelse(test = numbers >= 65, yes = 1, no =2)
for(i in 1:10000){
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
obs[n] <- obs[n] + 1
}
cards <- rep(c("diamonds", "clubs", "spades", "hearts"),13)
for(i in 1:10000){
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
obs[n] <- obs[n] + 1
}
obs
obs <- as.integer
obs
obs <- as.data.frame(4)
obs <- numeric(4) # need to initialize obs
for(i in 1:10000){
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
obs[n] <- obs[n] + 1
}
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
obs
for(i in 1:10000){
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
obs[n] <- obs[n] + 1
}
obs
obs <- numeric(4) # need to initialize obs
for(i in 1:10000){
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
obs[n] <- obs[n] + 1
}
obs <- numeric(4) # need to initialize obs
ibs
obs
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
s
n
s <- sample(cards, 5) # Random draw of 5 cards
n <- length(s) # Number of suits in this draw
s
n
set.seed(3)
for(i in 1:3){
print(paste("iteration", i))
s <- sample(cards, 5) # s: Random draw of 5 cards
print(s)
n <- length(s) # n: Number of suits in this draw
print(n)
obs[n] <- obs[n] + 1
print(obs)
}
for(i in 1:3){
print(paste("iteration", i))
s <- sample(cards, 5) # s: Random draw of 5 cards
print(s)
n <- length(s) # n: Number of suits in this draw
print(n)
obs[n] <- obs[n] + 1
print(obs)
}
set.seed(3)
for(i in 1:3){
print(paste("iteration", i))
s <- sample(cards, 5) # s: Random draw of 5 cards
print(s)
n <- length(s) # n: Number of suits in this draw
print(n)
obs[n] <- obs[n] + 1
print(obs)
}
n <- length(unique(s)) # n: Number of suits in this draw
print(n)
s <- sample(cards, 5) # s: Random draw of 5 cards
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
obs
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
set.seed(3)
for(i in 1:10000){
s <- sample(cards, 5) # s: Random draw of 5 cards
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
}
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
for(i in 1:10000){
s <- sample(cards, 5) # s: Random draw of 5 cards
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
}
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
set.seed(3)
for(i in 1:10000){
s <- sample(cards, 5) # s: Random draw of 5 cards
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
}
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
# Initialise obs
# obs[n]: number of trials in which we draw n different suits
obs <- numeric(4)
cards <- rep(c("diamonds", "clubs", "spades", "hearts"),13)
set.seed(3)
for(i in 1:10000){
s <- sample(cards, 5) # s: Random draw of 5 cards
n <- length(unique(s)) # n: Number of suits in this draw
obs[n] <- obs[n] + 1
}
barplot(obs/sum(obs),
main = "Number of Suits in a Random Draw of 5 Poker Cards",
xlab = "Number of suits",
ylab = "Estimated probability",
names.arg = 1:4)
map(df, mean)
# Load dependencies
library(tidyverse, purrr)
map(df, mean)
df
df %>% map_dbl(median)
df %>% map_dbl(median)
df %>% map_dbl(mean)
df %>% map_dbl(median)
pacman::p_load(tidyverse)
library(lapply)
library(lapply)
# Load dependencies
library(tidyverse, purrr, lapply)
lapply(df, mean)
# output is a list
sapply(df, mean)
x1 <- list(
c(0.27, 0.37, 0.57, 0.91, 0.20),
c(0.90, 0.94, 0.66, 0.63, 0.06),
c(0.21, 0.18, 0.69, 0.38, 0.77)
)
x2 <- list(
c(0.50, 0.72, 0.99, 0.38, 0.78),
c(0.93, 0.21, 0.65, 0.13, 0.27),
c(0.39, 0.01, 0.38, 0.87, 0.34)
)
threshold <- function(x, cutoff = 0.8) x[x > cutoff]
x1 %>% sapply(threshold) %>% str()
#> List of 3
#>  $ : num 0.91
#>  $ : num [1:2] 0.9 0.94
#>  $ : num(0)
x2 %>% sapply(threshold) %>% str()
theme_set(theme_minimal())
pacman::p_load(tidyverse, readr, here, ggplot2, mosaic)
theme_set(theme_minimal())
?binom.test
months <- c(rep("june2014", 2)
rep("july2014", 2),
rep("august2014", 2)
)
# X = 0 --> Standard, X = 1 --> PPF treated
exposed <- c(0, 1, 0, 1, 0, 1)
PT <- c(79,0, 123, 0, 103, 23)
cases <- c(33, 0, 454, 0, 244, 43)
df <- data.frame(month, expsoed, PT, cases)
df$incidence <- df$cases / df$PT
months <- c(rep("june2014", 2),
rep("july2014", 2),
rep("august2014", 2)
)
exposed <- c(0, 1, 0, 1, 0, 1)
PT <- c(79,0, 123, 0, 103, 23)
cases <- c(33, 0, 454, 0, 244, 43)
df <- data.frame(month, expsoed, PT, cases)
df$incidence <- df$cases / df$PT
# X = 0 --> Standard, X = 1 --> PPF treated
exposed <- c(0, 1, 0, 1, 0, 1)
PT <- c(79,0, 123, 0, 103, 23)
cases <- c(33, 0, 454, 0, 244, 43)
df <- data.frame(month, exposed, PT, cases)
df <- data.frame(month, exposed, PT, cases)
month <- c(rep("june2014", 2),
rep("july2014", 2),
rep("august2014", 2)
)
# X = 0 --> Standard, X = 1 --> PPF treated
exposed <- c(0, 1, 0, 1, 0, 1)
PT <- c(79,0, 123, 0, 103, 23)
cases <- c(33, 0, 454, 0, 244, 43)
df <- data.frame(month, exposed, PT, cases)
df$incidence <- df$cases / df$PT
df
glm(cases ~ exposed + offset = log(PT), family = poisson(link = log), data = df)
fit <- glm(cases ~ exposed + offset = log(PT), family = poisson(link = log), data = df)
fit
fit <- glm(cases ~ exposed + offset = log(PT), family = poisson(link = log), data = df)
fit <- glm(cases ~ exposed + offset(log(PT)), family = poisson(link = log), data = df)
## ----eval=TRUE, echo=FALSE----------------------------------------------------
df <- data.frame(month = rep(c(paste0(c("june","july","august","september","october",
"november","december"),"2014"),
paste0(c("may"),"2015"),
paste0(c("june","july","august","september","october",
"november","december"),"2015")
),
each = 2),
exposure = rep(c(0,1), 15),
years = c(79,0,123,0,103,23,79,39,81,63,78,81,80,84,
89,82,
59,77,54,99,29,123,0,139,0,166,0,185,0,189),
cases = c(33,0,454,0,244,43,177,66,212,155,193,170,111,92,
15,14,42,50,146,223,64,266,0,271,0,337,0,304,0,56)
)
df <- df[-which(df$years==0),]
df
## ----echo=FALSE, eval=TRUE----------------------------------------------------
fit <- glm(cases ~ exposure + offset(log(years)),
data = df, family = poisson(link = log))
print(summary(fit), signif.stars = F, show.call=TRUE)
## ---- Setup -----------------------------------------------------------------
knitr::opts_chunk$set( echo = TRUE,
warning = FALSE, message = FALSE, cache = FALSE, fig.align = "center", fig.asp = 1, fig.width = 10
)
library(pacman)
p_load(ggplot2, tidyverse, here, readxl, mosaic, pwr, ggpubr, car)
theme_set(theme_light())
# Set-up
df_fh <- readr::read_csv(here::here("fetal_health.csv")) %>%
select(!starts_with("histogram"))
setwd("~/Desktop/M1/EPIB607/Final Project")
```{r}
# Set-up
df_fh <- readr::read_csv(here::here("fetal_health.csv")) %>%
select(!starts_with("histogram"))
## ---- Setup -----------------------------------------------------------------
knitr::opts_chunk$set( echo = TRUE,
warning = FALSE, message = FALSE, cache = FALSE, fig.align = "center", fig.asp = 1, fig.width = 10
)
library(pacman)
p_load(ggplot2, tidyverse, here, readxl, mosaic, pwr, ggpubr, car)
theme_set(theme_light())
# Set-up
df_fh <- readr::read_csv(here::here("fetal_health.csv")) %>%
select(!starts_with("histogram"))
df_fh
ggplot(aes(x = fetal_health, y = 'baseline value' ))
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
df_fh %>% ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
# 1.a
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
df_fh$fetal_health
# 1.a
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
count(df_fh, fetal_health)
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_histogram()
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_histogram()+
geom_smooth()
df_fh %>%
ggplot(aes(x = `baseline value`, colour = fetal_health))+
geom_histogram()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = fetal_health))+
geom_histogram()
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = fetal_health))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = fetal_health))+
geom_density(alpha = 0.5)
## ---- Setup -----------------------------------------------------------------
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
cache = FALSE,
fig.align = "center",
fig.asp = 1
)
# Question 1
# 1.b
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
# Question 1
# 1.b
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
# 1.b
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
# 1.b
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>% group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
df_fh %>%
group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
## 1.c
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = fetal_health))+
geom_density(alpha = 0.5)
# Set-up
df_fh <- readr::read_csv(here::here("fetal_health.csv")) %>%
select(!starts_with("histogram"))
# Question 1
# 1.b
df_fh$fetal_health <- ifelse(df_fh$fetal_health == 1, "Normal", ifelse(df_fh$fetal_health == 2, "Suspect", "Pathological"))
df_fh %>%
group_by(fetal_health) %>%
ggplot(aes(x = fetal_health, y = `baseline value`)) +
geom_boxplot()
## 1.c
df_fh %>%
ggplot(aes(x = `baseline value`))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = fetal_health))+
geom_density(alpha = 0.5)
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density()
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density(colour = "cyan")
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density(fill = "cyan")
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density(fill = "olive_green")
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density(fill = "dark_green")
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density(fill = "darkgreen")
df_fh %>%
ggplot(aes(x = `baseline value`, fill = `baseline value`))+
geom_density()
